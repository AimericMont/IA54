/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.demos.boids

import java.awt.Color
import java.util.concurrent.atomic.AtomicBoolean
import java.util.Date
import javax.swing.JFrame
import java.awt.^event.ActionListener
import javax.swing.JButton
import java.awt.^event.ActionEvent
import javax.swing.JPanel
import java.awt.FlowLayout
import java.awt.Dimension
import java.awt.Toolkit

/** 
 * 
 * The main class configuring the various boids populations and launching the simulation
 * 
 * @author Nicolas Gaud
 */
class BoidsSimulationLauncher extends JFrame implements ActionListener {

	var bouton1 : JButton
	var bouton2 : JButton
	var bouton3 : JButton

	static var jFrame : JFrame

	public static var pBlue : Population = null
	public static var pRed : Population = null
	public static var pGreen : Population = null
	public static var lock : AtomicBoolean = new AtomicBoolean()
	public static var lock2 : AtomicBoolean = new AtomicBoolean()
	public static var lock3 : AtomicBoolean = new AtomicBoolean()
	public static var lock4 : AtomicBoolean = new AtomicBoolean()
	public static var lock5 : AtomicBoolean = new AtomicBoolean()
	public static var exitLock : AtomicBoolean = new AtomicBoolean()
	public static var initTime : Date
	public static var currentTime : long
	public static var startTime : boolean = false

	public static var scenario : int

	public static var TIME_CONTACT_1 = 167
	public static var TIME_CONTACT_2 = 10000
	public static var TIME_CONTACT_3 = 15000

	public static var PHASE_1 = 60000
	public static var PHASE_2 = 105000
	public static var PHASE_3 = 125000
	public static var PHASE_4 = 170000

	/*public static var PHASE_1 = 30000
	public static var PHASE_2 = 35000
	public static var PHASE_3 = 60000
	public static var PHASE_4 = 75000*/

	public static var BOIDSIZE = 4

	public static var NB_X_SEAT = 6
	public static var NB_Y_SEAT = 20
	public static var DIST_BETWEEN_SEAT = 10

	public static var NB_BOID = 120

	def buildContentPane(config : BoidsSimulationLauncher) : JPanel {
		var panel : JPanel = new JPanel()
		panel.setLayout(new FlowLayout())

		config.bouton1 = new JButton("Scénario 1")
		config.bouton1.addActionListener(this)
		config.bouton1.setPreferredSize(new Dimension(100, 100))
		panel.add(config.bouton1)

		config.bouton2 = new JButton("Scénario 2")
		config.bouton2.addActionListener(this)
		config.bouton2.setPreferredSize(new Dimension(100, 100))
		panel.add(config.bouton2)

		config.bouton3 = new JButton("Scénario 3")
		config.bouton3.addActionListener(this)
		config.bouton3.setPreferredSize(new Dimension(100, 100))
		panel.add(config.bouton3)

		return panel
	}

	def actionPerformed(e : ActionEvent) : void {
		var source : Object = e.getSource()

		if (source == bouton1) {
			System.out.println("Lancement scénario 1 ...")
			scenario = 1
		} else if (source == bouton2) {
			System.out.println("Lancement scénario 2 ...")
			scenario = 2
			NB_X_SEAT = 2 * NB_X_SEAT			
		} else {
			System.out.println("Lancement scénario 3 ...")
			scenario = 3
			NB_X_SEAT = 2 * NB_X_SEAT
			DIST_BETWEEN_SEAT = 15
			Population::DEFAULT_SEPARATION_DIST = 7
		}
		BoidsSimulationLauncher.start()
		jFrame.dispose
	}

	/** 
	 * @param args command line arguments
	 */
	static def main(args : String*) {

		var config : BoidsSimulationLauncher = new BoidsSimulationLauncher
		jFrame = new JFrame()
		var jPanel : JPanel = config.buildContentPane(config)
		jFrame.pack()

		// récuperer la taille de l'écran
		var tailleEcran : Dimension = Toolkit.getDefaultToolkit().getScreenSize()
		var height = tailleEcran.height
		var width = tailleEcran.width
		// taille est un demi la longueur et l'hauteur
		jFrame.setSize(width / 2, height / 2)
		// ici on centre notre fenetre
		jFrame.setLocationRelativeTo(null)
		// config.bouton1.setPreferredSize(new Dimension(200, 100))
		jFrame.getContentPane().add(jPanel)
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
		jFrame.setVisible(true)
	}

	static def start() {
		// 3 populations of boids (Red, Green and Blue)
		var simu = new BoidsSimulation
		pRed = new Population(Color::RED)
		pGreen = new Population(Color::GREEN)
		pBlue = new Population(Color::BLUE)
		lock.set(true)
		lock2.set(true)
		lock3.set(true)
		lock4.set(true)
		lock5.set(true)
		exitLock.set(true)

		// Initialization of the Green population
		for (var i = 0; i < NB_BOID; i++) {
			simu.addBoid(pGreen)
		}
		simu.start
	}

}
