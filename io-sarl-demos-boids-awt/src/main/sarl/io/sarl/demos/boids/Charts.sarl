/** 
 * 
 */
package io.sarl.demos.boids

import java.util.concurrent.ConcurrentLinkedQueue
import org.knowm.xchart.XChartPanel
import org.knowm.xchart.XYChart
import org.knowm.xchart.XYChartBuilder
import org.knowm.xchart.XYSeries
import org.knowm.xchart.style.markers.SeriesMarkers
import java.util.ArrayList
import org.knowm.xchart.SwingWrapper
import org.knowm.xchart.BitmapEncoder
import org.knowm.xchart.BitmapEncoder.BitmapFormat

/** 
 * @author Benjamin
 * 
 */

/** 
 * Panel for charts and data handling. 
 * 
 * @author AD
 * 
 */
class Charts {

	var chart : XYChart = null
	var infected : ConcurrentLinkedQueue<Double>
	var time : ConcurrentLinkedQueue<Double>
	var chartPanel : XChartPanel<XYChart> = null
	var serie : String = null

	new(s : String) {
		this.time = new ConcurrentLinkedQueue()
		this.infected = new ConcurrentLinkedQueue()
		this.infected.add(0.0)
		this.time.add(0.0)
		this.serie = s
	}

	new(s : String,time : Double,infected :Double) {
		this.time = new ConcurrentLinkedQueue()
		this.infected = new ConcurrentLinkedQueue()
		this.infected.add(infected)
		this.time.add(time)
		this.serie = s
	}

	new(c : Charts) {
		this.chart = c.chart
		this.time = c.time
		this.infected = c.infected
		this.chartPanel = c.chartPanel
		this.serie = c.serie
	}

	def getInfected() : ConcurrentLinkedQueue<Double> {
		return this.infected
	}

	def getTime() : ConcurrentLinkedQueue<Double> {
		return this.time
	}

	def getserie() : String {
		return this.serie
	}

	def updateValues(time : Float, infected : Float) : void {
		
		var tmp : double = (Math.round(infected * 100.0) / 100.0) 
		
		this.infected.add(tmp)
		this.time.add(time as Double)
	}

	def static drawStaticChart(l : ArrayList<Charts>) {

		var charts = new ArrayList<XYChart>();
		var i = 1

		for (list : l) {
			var s : String = "./Sample_Chart/" + i
			var chart : XYChart = new XYChartBuilder().xAxisTitle("Time").yAxisTitle("Contact").width(600).height(400).
				build()
			var series : XYSeries = chart.addSeries(list.serie, list.getTime(), list.getInfected())
			series.setMarker(SeriesMarkers.NONE)
			charts.add(chart)

			//BitmapEncoder.saveBitmap(chart, s, BitmapFormat.PNG)
			//System.out.println("Saving chart in " + s)
			i = i + 1
			// VectorGraphicsEncoder.saveVectorGraphic(chart, "./Sample_Chart", VectorGraphicsFormat.PDF);
		}

		new SwingWrapper<XYChart>(charts).displayChartMatrix()
	}

// Methode utilisée pour créer des charts en temps réel

/* def buildPanel() : XChartPanel<XYChart> throws IOException {

 * chart = new XYChartBuilder().width(800).height(400).title("Average of contacts").xAxisTitle("Time").
 * yAxisTitle("Contact").build()

 * chart.getStyler().setLegendPosition(LegendPosition.InsideNE)
 * // chart.getStyler().setDefaultSeriesRenderStyle(XYSeriesRenderStyle.Area)
 * chart.getStyler().setDefaultSeriesRenderStyle(XYSeriesRenderStyle.Step)

 * var series : XYSeries = chart.addSeries(this.serie, time, infected)
 * series.setMarker(SeriesMarkers.NONE)

 * return new XChartPanel<XYChart>(chart)
 * }

 * // Used for displaying real time chart
 * def go() : void throws IOException {

 * // Setup the panel
 * chartPanel = buildPanel()
 * // Schedule a job for the event-dispatching thread:
 * // creating and showing this application's GUI.
 * javax.swing.SwingUtilities.invokeLater(
 * new Runnable() {

 * @Override
 * def run() : void {

 * // Create and set up the window.
 * var frame : JFrame = new JFrame("XChart")
 * frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
 * frame.add(chartPanel)

 * // Display the window.
 * frame.pack()
 * frame.setVisible(true)
 * }
 * }
 * )
 * }

 * def updateChart() : void {
 * try {
 * // update chart
 * chart.updateXYSeries(this.serie, time, infected, null)
 * chart.updateXYSeries(this.serie, time, infected, null)
 * chartPanel.revalidate();
 * chartPanel.repaint();
 * } catch (e : IOException) {
 * e.printStackTrace();
 * }
 * }
 */

}
